  console.log
    ==========================================================================
    Alice deploys Niftory's contract
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    ==========================================================================
    Alice will deploy the NFT registry and register NiftoryTemplate as a brand owned by Bob
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "niftory_admin/initialize",
      "authorizers": [
        "admin_alice"
      ],
      "args": []
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "niftory_admin/register_brand",
      "authorizers": [
        "admin_alice"
      ],
      "args": [
        "0x179b6b1cb6755e31",
        "NiftoryTemplate"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "niftory/brands",
      "args": [
        "0x01cf0e2f2f715450"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "NiftoryTemplate": {
          "contractAddress": "0x179b6b1cb6755e31",
          "collectionPaths": {
            "public": {
              "domain": "public",
              "identifier": "NiftoryTemplate_nft_collection"
            },
            "private": {
              "domain": "private",
              "identifier": "NiftoryTemplate_nft_collection"
            },
            "storage": {
              "domain": "storage",
              "identifier": "NiftoryTemplate_nft_collection"
            }
          },
          "nftManager": {
            "account": "0x179b6b1cb6755e31",
            "paths": {
              "public": {
                "domain": "public",
                "identifier": "NiftoryTemplate_nft_manager"
              },
              "private": {
                "domain": "private",
                "identifier": "NiftoryTemplate_nft_manager"
              },
              "storage": {
                "domain": "storage",
                "identifier": "NiftoryTemplate_nft_manager"
              }
            }
          },
          "setManager": {
            "account": "0x179b6b1cb6755e31",
            "paths": {
              "public": {
                "domain": "public",
                "identifier": "NiftoryTemplate_set_manager"
              },
              "private": {
                "domain": "private",
                "identifier": "NiftoryTemplate_set_manager"
              },
              "storage": {
                "domain": "storage",
                "identifier": "NiftoryTemplate_set_manager"
              }
            }
          },
          "metadataViewsManager": {
            "account": "0x179b6b1cb6755e31",
            "paths": {
              "public": {
                "domain": "public",
                "identifier": "NiftoryTemplate_metadata_views_manager"
              },
              "private": {
                "domain": "private",
                "identifier": "NiftoryTemplate_metadata_views_manager"
              },
              "storage": {
                "domain": "storage",
                "identifier": "NiftoryTemplate_metadata_views_manager"
              }
            }
          }
        }
      }
    }

      at log (src/script.ts:57:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set_manager/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "failure",
      "error": {}
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will deploy the NFT contract and we will check the info again
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set_manager/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "name": "NiftoryTemplate",
        "description": "The set manager for NiftoryTemplate.",
        "numSets": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will change the name and description of the set manager
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "set_manager_admin/set_name",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "Set Manager 2"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_manager_admin/set_description",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "This is a mutable set manager"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set_manager/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "name": "Set Manager 2",
        "description": "This is a mutable set manager",
        "numSets": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will add three empty sets
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "set_manager_admin/add_set",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        {
          "name": "Set 1"
        }
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_manager_admin/add_set",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        {
          "name": "Set 2"
        }
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_manager_admin/add_set",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        {
          "name": "Set 3"
        }
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set_manager/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "name": "Set Manager 2",
        "description": "This is a mutable set manager",
        "numSets": 3
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Check to see if the first set was initialized correctly
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "numTemplates": 0,
        "metadata": {
          "name": "Set 1"
        }
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will add three templates to the first set
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "set_admin/add_template",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        {
          "name": "Template 1"
        },
        null
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_admin/add_template",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        {
          "name": "Template 2"
        },
        5
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_admin/add_template",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        {
          "name": "Template 3"
        },
        10
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "numTemplates": 3,
        "metadata": {
          "name": "Set 1"
        }
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will lock the set to make sure no more templates can be added
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "set_admin/lock",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "set_admin/add_template",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        {
          "name": "Template 4"
        },
        null
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> 7c12f2ff3976786f1fe8aae5d8e3e6a6c760bac0021492152bcdc3a660b7f592:31:4\n   |\n31 |     self.nftManager.addTemplate(setId: setId, template: <-template)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:358:6\n    |\n358 |       self._getSetMutable(setId).addTemplate(<-template)\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: Cannot add template. Set is locked\n   --> 01cf0e2f2f715450.MutableMetadataSet:138:8\n    |\n138 |         !self._locked : \"Cannot add template. Set is locked\"\n    |         ^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_set/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": true,
        "metadataLocked": false,
        "numTemplates": 3,
        "metadata": {
          "name": "Set 1"
        }
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Let's inspect the first two templates
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "metadata": {
          "name": "Template 1"
        },
        "minted": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        1
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "metadata": {
          "name": "Template 2"
        },
        "maxMint": 5,
        "minted": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will try modifying the metadata of the first template using various methods
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/set_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "key1",
        "value1"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/set_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "key2",
        "value2"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/set_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "key3",
        "value3"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/delete_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "key2"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "metadata": {
          "key1": "value1",
          "name": "Template 1",
          "key3": "value3"
        },
        "minted": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/replace_metadata",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        {
          "KEY1": "VALUE1",
          "KEY2": "VALUE2",
          "KEY3": "VALUE3"
        }
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/delete_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "KEY2"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "metadata": {
          "KEY3": "VALUE3",
          "KEY1": "VALUE1"
        },
        "minted": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob should not be able to modify the metadata anymore after locking it.
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/lock",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/set_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "key1",
        "value1"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> 28c1a13693ac560d9e3116c6ccd9170356c88bd6d395af4c960f075b41822f64:24:23\n   |\n24 |     let metadataAuth = self.nftManager.modifyNFTMetadata(\n   |                        ^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:422:13\n    |\n422 |       return self._getNFTMetadata(setId, templateId).getMutable()\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: Metadata is locked\n  --> 01cf0e2f2f715450.MutableMetadata:79:8\n   |\n79 |         !self._locked : \"Metadata is locked\"\n   |         ^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": true,
        "metadata": {
          "KEY3": "VALUE3",
          "KEY1": "VALUE1"
        },
        "minted": 0
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Carol and Charlie will initialize their collections.
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "collector/initialize",
      "authorizers": [
        "collector_carol"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "collector/initialize",
      "authorizers": [
        "collector_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 0,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x045a1763c93006ca"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 0,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will mint 50 NFTs for Carol and 10 to Charlie
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 0,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 1,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 2,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615",
        10
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 11,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 10,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 9,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 8,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 7,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 6,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 5,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 4,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 3,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 2,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0x045a1763c93006ca"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 12,
            "to": "0x045a1763c93006ca"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 13,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0x045a1763c93006ca",
        9
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 22,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 21,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 20,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 19,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 18,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 17,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 16,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 15,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 14,
            "to": "0x045a1763c93006ca"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615",
        19
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 41,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 40,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 39,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 38,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 37,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 36,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 35,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 34,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 33,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 32,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 31,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 30,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 29,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 28,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 27,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 26,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 25,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 24,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 23,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615",
        18
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 59,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 58,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 57,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 56,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 55,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 54,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 53,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 52,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 51,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 50,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 49,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 48,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 47,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 46,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 45,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 44,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 43,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 42,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 50,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x045a1763c93006ca"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 10,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": true,
        "metadata": {
          "KEY3": "VALUE3",
          "KEY1": "VALUE1"
        },
        "minted": 60
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will lock the NFT template to prevent future minting.
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/lock",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> 0c5343e62a89de293bbf147277ab1cf0af62b1943b184b28852151c070774f8a:28:15\n   |\n28 |     let nft <- self.nftManager.mint(setId: setId, templateId: templateId)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:378:6\n    |\n378 |       template.registerMint()\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: Template is locked\n   --> 01cf0e2f2f715450.MutableMetadataTemplate:134:8\n    |\n134 |         !self._locked : \"Template is locked\"\n    |         ^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        0
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": true,
        "metadataLocked": true,
        "metadata": {
          "KEY3": "VALUE3",
          "KEY1": "VALUE1"
        },
        "minted": 60
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will mint 6 NFTs from the second template (limited to 5)
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        1,
        "0xe03daebed8ca0615",
        5
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 64,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 63,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 62,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 61,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 60,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        1,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> cf4459b6e665ce7740f28964eb96a44617be34989161d77c8dfbbe0f31b2c750:28:15\n   |\n28 |     let nft <- self.nftManager.mint(setId: setId, templateId: templateId)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:378:6\n    |\n378 |       template.registerMint()\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: Minting limit of 5 reached.\n   --> 01cf0e2f2f715450.MutableMetadataTemplate:130:8\n    |\n130 |         self._maxMint == nil || self._minted < self._maxMint! :\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        1
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": false,
        "metadataLocked": false,
        "metadata": {
          "name": "Template 2"
        },
        "maxMint": 5,
        "minted": 5
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Bob will mint 5 NFTs from the third template (limited to 10) and lock it
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint_bulk",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        2,
        "0xe03daebed8ca0615",
        5
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 69,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 68,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 67,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 66,
            "to": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 65,
            "to": "0xe03daebed8ca0615"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/lock",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        2
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    TX REQ: 
    {
      "codePath": "template_admin/mint",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        2,
        "0xe03daebed8ca0615"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> cc5519346f955546bf1b49a0756a76e4308b09730f39f5f52a790ee797bee31f:28:15\n   |\n28 |     let nft <- self.nftManager.mint(setId: setId, templateId: templateId)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:378:6\n    |\n378 |       template.registerMint()\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: Template is locked\n   --> 01cf0e2f2f715450.MutableMetadataTemplate:134:8\n    |\n134 |         !self._locked : \"Template is locked\"\n    |         ^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "mutable_metadata/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        2
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "locked": true,
        "metadataLocked": false,
        "metadata": {
          "name": "Template 3"
        },
        "maxMint": 10,
        "minted": 5
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Carol will transfer 10 NFTs to Charlie
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "collector/transfer_bulk",
      "authorizers": [
        "collector_carol"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x045a1763c93006ca",
        [
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39
        ]
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": [
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 39,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 38,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 37,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 36,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 35,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 34,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 33,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 32,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 31,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Withdraw",
          "data": {
            "id": 30,
            "from": "0xe03daebed8ca0615"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 30,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 31,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 32,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 33,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 34,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 35,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 36,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 37,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 38,
            "to": "0x045a1763c93006ca"
          }
        },
        {
          "type": "A.179b6b1cb6755e31.NiftoryTemplate.Deposit",
          "data": {
            "id": 39,
            "to": "0x045a1763c93006ca"
          }
        }
      ]
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/info",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x045a1763c93006ca"
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "numNfts": 20,
        "nftIds": {}
      }
    }

      at log (src/script.ts:57:15)

  console.log
    TX REQ: 
    {
      "codePath": "collector/transfer_bulk",
      "authorizers": [
        "collector_carol"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x045a1763c93006ca",
        [
          30
        ]
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "failure",
      "error": "execution error code 1101: [Error Code: 1101] cadence runtime error Execution failed:\n  --> f6734afefef7dd6fa805744503b4e6fe47d561805ac7682de48ff5b655cd77f1:24:17\n   |\n24 |     self.nfts <- collection.withdrawBulk(withdrawIDs: ids)\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   --> 179b6b1cb6755e31.NiftoryTemplate:201:25\n    |\n201 |         tokens.append(<- self.withdraw(withdrawID: withdrawIDs.removeLast()))\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: pre-condition failed: NFT 30 does not exist in collection.\n   --> 179b6b1cb6755e31.NiftoryTemplate:188:22\n    |\n188 |         self.ownedNFTs[withdrawID] != nil\n    |                       ^^^^^^^^^^^^^^^^^^^\n"
    }

      at log (src/transaction.ts:79:15)

  console.log
    ==========================================================================
    Bob will change the metadata of one of the templates for an NFT Carol has.
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    SC REQ: 
    {
      "codePath": "collection/nft",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615",
        60
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "id": 60,
        "serial": 1,
        "setId": 0,
        "templateId": 1,
        "metadata": {
          "name": "Template 2"
        },
        "setMetadata": {
          "name": "Set 1"
        },
        "views": []
      }
    }

      at log (src/script.ts:57:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadata_admin/set_field",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        0,
        1,
        "key",
        "value"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/nft",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615",
        60
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "id": 60,
        "serial": 1,
        "setId": 0,
        "templateId": 1,
        "metadata": {
          "name": "Template 2",
          "key": "value"
        },
        "setMetadata": {
          "name": "Set 1"
        },
        "views": []
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Royalty resolver
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    SC REQ: 
    {
      "codePath": "collection/metadata_views/royalty",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615",
        60
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "failure",
      "error": {}
    }

      at log (src/script.ts:57:15)

  console.log
    TX REQ: 
    {
      "codePath": "metadataviews_manager_admin/royalties/set",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0x179b6b1cb6755e31",
        "flowTokenReceiver",
        "0.05",
        "royalty for xx"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/metadata_views/royalty",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615",
        60
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "success",
      "value": {
        "token": "A.0ae53cb6e3f42a79.FlowToken.Vault",
        "cut": 0.05,
        "description": "royalty for xx"
      }
    }

      at log (src/script.ts:57:15)

  console.log
    ==========================================================================
    Royalty resolver removed
    ==========================================================================

      at log (tests/kotd.test.ts:45:11)

  console.log
    TX REQ: 
    {
      "codePath": "metadataviews_manager_admin/royalties/remove",
      "authorizers": [
        "brand_manager_bob"
      ],
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate"
      ]
    }

      at log (src/transaction.ts:76:15)

  console.log
    TX RES: 
    {
      "_tag": "success",
      "events": []
    }

      at log (src/transaction.ts:79:15)

  console.log
    SC REQ: 
    {
      "codePath": "collection/metadata_views/royalty",
      "args": [
        "0x01cf0e2f2f715450",
        "NiftoryTemplate",
        "0xe03daebed8ca0615",
        60
      ]
    }

      at log (src/script.ts:56:15)

  console.log
    SC RES: 
    {
      "_tag": "failure",
      "error": {}
    }

      at log (src/script.ts:57:15)

